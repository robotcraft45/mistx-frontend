{"version":3,"sources":["types/index.ts","theme/index.ts","config/index.ts","services/wallet.ts","context/wallet.tsx","components/wallet-button.tsx","components/balance.tsx","App.tsx","reportWebVitals.ts","theme/global-css.ts","index.tsx"],"names":["Network","customTheme","extendTheme","config","initialColorMode","useSystemColorMode","colors","brand","50","100","200","300","400","500","600","700","800","900","fonts","heading","body","components","Heading","baseStyle","fontWeight","Button","borderRadius","theme","radii","variants","solid","bg","color","outline","borderColor","networkId","MAINNET","rpcUrl","dappId","appName","WalletStateContext","createContext","undefined","WalletProvider","children","useState","provider","setProvider","address","setAddress","network","setNetwork","balance","setBalance","wallet","setWallet","loading","setLoading","onboard","setOnboard","notify","setNotify","useEffect","subscriptions","ethers","utils","formatEther","selectedAddress","handleSetProvider","Onboard","darkMode","walletSelect","wallets","walletName","preferred","infuraKey","label","apiKey","walletCheck","checkName","Notify","previouslySelectedWallet","window","localStorage","getItem","ethersProvider","providers","Web3Provider","setItem","name","Provider","value","useWallet","context","useContext","Error","WalletButton","connected","mt","size","colorScheme","onClick","walletReset","isLoading","Balance","width","flex","App","minH","flexDir","alignItems","justifyContent","fontSize","bgGradient","bgClip","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyles","css","ReactDOM","render","StrictMode","styles","document","getElementById"],"mappings":"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","file":"static/js/main.c11c40dd.chunk.js","sourcesContent":["export enum Network {\n  'MAINNET' = 1,\n  'ROPSTEN' = 3,\n  'RINKEBY' = 4,\n  'GOERLI' = 5,\n  'KOVAN' = 42,\n  'xDAI' = 100,\n}\n","import { extendTheme, ThemeConfig, theme } from '@chakra-ui/react';\n\nconst config: ThemeConfig = {\n  initialColorMode: 'dark',\n  useSystemColorMode: false,\n};\n\nconst customTheme = extendTheme({\n  config,\n  colors: {\n    brand: {\n      50: '#E7F3FE',\n      100: '#BBDDFC',\n      200: '#8FC7FA',\n      300: '#63B1F8',\n      400: '#379CF6',\n      500: '#0B86F4',\n      600: '#096BC3',\n      700: '#075092',\n      800: '#043662',\n      900: '#021B31',\n    },\n  },\n  fonts: {\n    heading: 'Poppins',\n    body: 'Poppins',\n  },\n  components: {\n    Heading: {\n      baseStyle: {\n        fontWeight: 700,\n      },\n    },\n    Button: {\n      baseStyle: {\n        fontWeight: 600,\n        borderRadius: theme.radii['xl'],\n      },\n      variants: {\n        solid: {\n          bg: 'brand.500',\n          color: 'white',\n        },\n        outline: {\n          borderColor: 'brand.500',\n          color: 'brand.500',\n        },\n      },\n    },\n  },\n});\n\nexport default customTheme;\n","import { Network } from '../types';\n\ntype Config = {\n  networkId: Network;\n  rpcUrl: string;\n  dappId: string;\n  appName: string;\n};\n\nexport const config: Config = {\n  networkId: Network.MAINNET,\n  rpcUrl: 'https://mainnet.infura.io/v3/5505e75053fb4b1ea7ee11fa60f42529',\n  dappId: '6bc363be-f6c0-4593-8edd-761472d54dfe',\n  appName: 'mistX',\n};\n","import Onboard from 'bnc-onboard';\nimport Notify, { API as NotifyAPI } from 'bnc-notify';\nimport { API as OnboardAPI, Wallet } from 'bnc-onboard/dist/src/interfaces';\nimport { Dispatch, SetStateAction } from 'react';\nimport { Network } from '../types';\nimport { config } from '../config';\n\ntype Subscriptions = {\n  address: Dispatch<SetStateAction<string | undefined>>;\n  network: Dispatch<SetStateAction<Network | undefined>>;\n  balance: (balance: string) => void;\n  wallet: (wallet: Wallet) => void;\n};\n\nconst { dappId, networkId, rpcUrl, appName } = config;\n\nexport function initOnboard(subscriptions: Subscriptions): OnboardAPI {\n  return Onboard({\n    dappId,\n    networkId,\n    darkMode: true,\n    subscriptions,\n    walletSelect: {\n      wallets: [\n        { walletName: 'metamask', preferred: true },\n        { walletName: 'trust', preferred: true },\n        { walletName: 'authereum', preferred: true },\n        { walletName: 'coinbase', preferred: true },\n        {\n          walletName: 'walletConnect',\n          infuraKey: 'd5e29c9b9a9d4116a7348113f57770a8',\n          preferred: true,\n        },\n        {\n          walletName: 'portis',\n          label: 'Portis',\n          apiKey: 'e86e917b-b682-4a5c-bbc5-0f8c3b787562',\n          preferred: true,\n        },\n        { walletName: 'opera' },\n        { walletName: 'torus' },\n        { walletName: 'status' },\n        { walletName: 'walletLink', appName, rpcUrl },\n        { walletName: 'frame' },\n        { walletName: 'operaTouch' },\n        { walletName: 'imToken', rpcUrl },\n        { walletName: 'meetone' },\n        { walletName: 'mykey', rpcUrl },\n        { walletName: 'wallet.io', rpcUrl },\n        { walletName: 'huobiwallet', rpcUrl },\n        { walletName: 'hyperpay' },\n        { walletName: 'atoken' },\n        { walletName: 'liquality' },\n      ],\n    },\n    walletCheck: [\n      { checkName: 'derivationPath' },\n      { checkName: 'connect' },\n      { checkName: 'accounts' },\n      { checkName: 'network' },\n    ],\n  });\n}\n\nexport function initNotify(): NotifyAPI {\n  return Notify({\n    dappId,\n    networkId,\n  });\n}\n","import { ethers } from 'ethers';\nimport { Network } from '../types';\nimport { Wallet } from 'bnc-onboard/dist/src/interfaces';\nimport { initNotify, initOnboard } from '../services/wallet';\nimport {\n  createContext,\n  ReactElement,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\ntype WalletProviderContext = {\n  provider?: ethers.providers.Web3Provider;\n  address?: string;\n  network?: Network;\n  balance?: string;\n  wallet?: Wallet;\n  loading?: boolean;\n  onboard?: ReturnType<typeof initOnboard>;\n  notify?: ReturnType<typeof initNotify>;\n};\n\ntype WalletProviderProps = { children: ReactElement };\n\nconst WalletStateContext = createContext<WalletProviderContext | undefined>(\n  undefined\n);\n\nfunction WalletProvider({ children }: WalletProviderProps): ReactElement {\n  const [provider, setProvider] = useState<ethers.providers.Web3Provider>();\n  const [address, setAddress] = useState<string>();\n  const [network, setNetwork] = useState<Network>();\n  const [balance, setBalance] = useState<string>();\n  const [wallet, setWallet] = useState<Wallet>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [onboard, setOnboard] = useState<ReturnType<typeof initOnboard>>();\n  const [notify, setNotify] = useState<ReturnType<typeof initNotify>>();\n\n  useEffect(() => {\n    const onboard = initOnboard({\n      address: setAddress,\n      network: setNetwork,\n      balance: (balance) => {\n        if (balance) {\n          setBalance(ethers.utils.formatEther(balance));\n        }\n      },\n      wallet: (wallet: Wallet) => {\n        if (wallet?.provider?.selectedAddress) {\n          setWallet(wallet);\n          handleSetProvider(wallet);\n          setLoading(false);\n        } else {\n          setProvider(undefined);\n          setWallet(undefined);\n          setBalance(undefined);\n          setLoading(false);\n        }\n      },\n    });\n\n    setOnboard(onboard);\n    setNotify(initNotify());\n  }, []);\n\n  useEffect(() => {\n    const previouslySelectedWallet = window.localStorage.getItem(\n      'selectedWallet'\n    );\n\n    if (!previouslySelectedWallet) {\n      setLoading(false);\n    }\n\n    if (previouslySelectedWallet && onboard) {\n      onboard.walletSelect(previouslySelectedWallet);\n    }\n  }, [onboard]);\n\n  const handleSetProvider = (wallet: Wallet) => {\n    const ethersProvider = new ethers.providers.Web3Provider(wallet.provider);\n    setProvider(ethersProvider);\n    window.localStorage.setItem('selectedWallet', wallet.name || '');\n  };\n\n  return (\n    <WalletStateContext.Provider\n      value={{\n        provider,\n        address,\n        network,\n        balance,\n        wallet,\n        loading,\n        onboard,\n        notify,\n      }}\n    >\n      {children}\n    </WalletStateContext.Provider>\n  );\n}\n\nfunction useWallet(): WalletProviderContext {\n  const context = useContext(WalletStateContext);\n  if (context === undefined) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n}\n\nexport { WalletProvider, useWallet };\n","import { Button } from '@chakra-ui/button';\nimport { useWallet } from '../context/wallet';\n\ntype Props = {\n  connected: boolean;\n};\n\nfunction WalletButton({ connected }: Props) {\n  const { onboard, loading } = useWallet();\n\n  const handleClick = () =>\n    connected ? onboard?.walletReset() : onboard?.walletSelect();\n\n  return (\n    <Button\n      mt={4}\n      size='lg'\n      colorScheme='brand'\n      onClick={handleClick}\n      isLoading={loading}\n    >\n      {connected ? 'Disconnect' : 'Connect'}\n    </Button>\n  );\n}\n\nexport default WalletButton;\n","import { Box, Stat, StatLabel, StatNumber, StatGroup } from '@chakra-ui/react';\nimport { useWallet } from '../context/wallet';\n\nfunction Balance() {\n  const { balance } = useWallet();\n\n  return (\n    <Box mt={8}>\n      <StatGroup width='sm'>\n        <Stat flex='initial'>\n          <StatLabel>Eth</StatLabel>\n          <StatNumber>{balance}</StatNumber>\n        </Stat>\n      </StatGroup>\n    </Box>\n  );\n}\n\nexport default Balance;\n","import { useWallet } from './context/wallet';\nimport { Flex, Heading, Text } from '@chakra-ui/layout';\nimport WalletButton from './components/wallet-button';\nimport Balance from './components/balance';\n\nfunction App() {\n  const { provider, wallet, balance } = useWallet();\n\n  return (\n    <Flex\n      minH='100vh'\n      flexDir='column'\n      alignItems='center'\n      justifyContent='center'\n    >\n      <Heading\n        fontSize={['6xl', '6xl', '8xl']}\n        bgGradient='linear(to-r, #FF0080, #7928CA)'\n        bgClip='text'\n      >\n        mistX\n      </Heading>\n      <Text color='gray.400' fontSize='2xl'>\n        Gasless DEX\n      </Text>\n      <WalletButton connected={!!wallet && !!provider} />\n      {balance && <Balance />}\n    </Flex>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react';\n\nexport const GlobalStyles = css`\n  /*\n    This will hide the focus indicator if the element receives focus    via the mouse,\n    but it will still show up on keyboard focus.\n  */\n  .js-focus-visible :focus:not([data-focus-visible-added]) {\n    outline: none;\n    box-shadow: none;\n  }\n  .bn-onboard-custom.bn-onboard-dark-mode {\n    background: #2f3747 !important;\n  }\n  .bn-onboard-custom.bn-onboard-dark-mode-background-hover:hover,\n  .bn-onboard-custom.bn-onboard-dark-mode-background {\n    background: #1a202c !important;\n  }\n  .bn-onboard-custom.bn-onboard-dark-mode-link {\n    color: #0b86f4 !important;\n    border-color: #0b86f4 !important;\n  }\n`;\n","import 'focus-visible/dist/focus-visible';\n\nimport theme from './theme';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\nimport { WalletProvider } from './context/wallet';\nimport { GlobalStyles } from './theme/global-css';\nimport { Global } from '@emotion/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WalletProvider>\n      <ChakraProvider theme={theme}>\n        <Global styles={GlobalStyles} />\n        <App />\n      </ChakraProvider>\n    </WalletProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}